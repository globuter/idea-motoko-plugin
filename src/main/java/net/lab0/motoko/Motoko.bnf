{
  parserClass="net.lab0.motoko.parser.MotokoParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"
  extends("exp_.*")=exp
  extends("pat_.*")=pat

  psiClassPrefix="Motoko"
  psiImplClassSuffix="Impl"
  psiPackage="net.lab0.motoko.psi"
  psiImplPackage="net.lab0.motoko.psi.impl"

  elementTypeHolderClass="net.lab0.motoko.psi.MotokoTypes"
  elementTypeClass="net.lab0.motoko.psi.MotokoElementType"
  tokenTypeClass="net.lab0.motoko.psi.MotokoTokenType"

  psiImplUtilClass="net.lab0.motoko.psi.impl.MotokoPsiImplUtil"
}

motokoFile ::= prog

empty ::=

//<list(X, SEP)> ::=
//    <empty>
//    X
//    X SEP <list(X, SEP)>

//meta list ::= <empty> | <<X>> | <<X>> <<SEP>> <<list <<X>> <<SEP>> >>

//<list1(X, SEP)> ::=
//    X
//    X SEP <list(X, SEP)>

//<obj_sort> ::=
//    'object'
//    'actor'
//    'module'

obj_sort ::=
    OBJECT
  | ACTOR
  | MODULE

//<func_sort_opt> ::=
//    <empty>
//    'shared' 'query'?
//    'query'

//<shared_pat_opt> ::=
//    <empty>
//    'shared' 'query'? <pat_plain>?
//    'query' <pat_plain>?

shared_pat_opt ::=
    SHARED QUERY? pat_plain?
  | QUERY pat_plain?
  | empty

//<typ_obj> ::=
//    '{' <list(<typ_field>, ';')> '}'
//
//<typ_variant> ::=
//    '{' '#' '}'
//    '{' <list1(<typ_tag>, ';')> '}'

//<typ_nullary> ::=
//    '(' <list(<typ_item>, ',')> ')'
//    <id> ('.' <id>)* <typ_args>?
//    '[' 'var'? <typ> ']'
//    <typ_obj>
//    <typ_variant>

typ_nullary ::=
    L_PAREN typ_item? (COMA typ_item)* R_PAREN
  | ID (POINT ID)* typ_args?
  | L_SQUARE VAR? typ R_SQUARE

//<typ_un> ::=
//    <typ_nullary>
//    '?' <typ_un>

typ_un ::=
    typ_nullary
  | '?' typ_un

//<typ_pre> ::=
//    <typ_un>
//    'async' <typ_pre>
//    <obj_sort> <typ_obj>

typ_pre ::=
    typ_un

//<typ> ::=
//    <typ_pre>
//    <func_sort_opt> ('<' <list(<typ_bind>, ',')> '>')? <typ_un> '->' <typ>

typ ::=
    typ_pre

//<typ_item> ::=
//    <id> ':' <typ>
//    <typ>

typ_item ::=
    ID COLUMN typ
  | typ

//<typ_args> ::=
//    '<' <list(<typ>, ',')> '>'

typ_args ::=
    L_ANGLE typ (COMA typ)* R_ANGLE

//<typ_field> ::=
//    'var'? <id> ':' <typ>
//    <id> ('<' <list(<typ_bind>, ',')> '>')? <typ_nullary> ':' <typ>

//<typ_tag> ::=
//    '#' <id> (':' <typ>)?

//<typ_bind> ::=
//    <id> '<:' <typ>
//    <id>

//<lit> ::=
//    'null'
//    <bool>
//    <nat>
//    <float>
//    <char>
//    <text>

lit ::=
    NULL
  | bool
  | FLOAT
  | NAT
  | CHAR
  | TEXT

bool ::= TRUE | FALSE

//<unop> ::=
//    '+'
//    '-'
//    '^'

exp_unop ::=
    PLUS exp
  | MINUS exp
  | CARRET exp

//<binop> ::=
//    '+'
//    '-'
//    '*'
//    '/'
//    '%'
//    '**'
//    '+%'
//    '-%'
//    '*%'
//    '**%'
//    '&'
//    '|'
//    '^'
//    '<<'
//    ' >>'
//    '<<>'
//    '<>>'
//    '#'

//<relop> ::=
//    '=='
//    '!='
//    ' < '
//    '<='
//    ' > '
//    '>='

private relational_group ::=
    exp_eq
  | exp_neq
  | exp_lt
  | exp_lte
  | exp_gt
  | exp_gte

exp_eq ::=
    exp EQEQ exp

exp_neq ::=
    exp NEQ exp

exp_lt ::=
    exp L_ANGLE exp  // using '<' instead of " < "

exp_lte ::=
    exp LTE exp

exp_gt ::=
    exp R_ANGLE exp  // using '>' instead of " > "

exp_gte ::=
    exp GTE exp

exp_and ::=
    exp AND exp

exp_or ::=
    exp OR exp

exp_column ::=
    exp COLUMN typ

//<unassign> ::=
//    '+='
//    '-='
//    '^='

//<binassign> ::=
//    '+='
//    '-='
//    '*='
//    '/='
//    '%='
//    '**-'
//    '+%='
//    '-%='
//    '*%='
//    '**%='
//    '&='
//    '|='
//    '^='
//    '<<='
//    '>>='
//    '<<>='
//    '<>>='
//    '@='

private exp_binassign ::=
    exp_binassign_in_place_update
  | exp_binassign_in_place_add
  | exp_binassign_in_place_subtract
  | exp_binassign_in_place_multiply
  | exp_binassign_in_place_divide
  | exp_binassign_in_place_modulo
  | exp_binassign_in_place_exponentiation
  | exp_binassign_in_place_logical_and
  | exp_binassign_in_place_logical_or
  | exp_binassign_in_place_exclusive_or
  | exp_binassign_in_place_shift_left
  | exp_binassign_in_place_shift_right
  | exp_binassign_in_place_rotate_left
  | exp_binassign_in_place_rotate_right
  | exp_binassign_in_place_add_wrap_on_overflow
  | exp_binassign_in_place_subtract_wrap_on_overflow
  | exp_binassign_in_place_multiply_wrap_on_overflow
  | exp_binassign_in_place_exponentiation_wrap_on_overflow
  | exp_binassign_in_place_concatenation

exp_binassign_in_place_update ::=
    exp IN_PLACE_UPDATE exp

exp_binassign_in_place_add ::=
    exp IN_PLACE_ADD exp

exp_binassign_in_place_subtract ::=
    exp IN_PLACE_SUBTRACT exp

exp_binassign_in_place_multiply ::=
    exp IN_PLACE_MULTIPLY exp

exp_binassign_in_place_divide ::=
    exp IN_PLACE_DIVIDE exp

exp_binassign_in_place_modulo ::=
    exp IN_PLACE_MODULO exp

exp_binassign_in_place_exponentiation ::=
    exp IN_PLACE_EXPONENTIATION exp

exp_binassign_in_place_logical_and ::=
    exp IN_PLACE_LOGICAL_AND exp

exp_binassign_in_place_logical_or ::=
    exp IN_PLACE_LOGICAL_OR exp

exp_binassign_in_place_exclusive_or ::=
    exp IN_PLACE_EXCLUSIVE_OR exp

exp_binassign_in_place_shift_left ::=
    exp IN_PLACE_SHIFT_LEFT exp

exp_binassign_in_place_shift_right ::=
    exp IN_PLACE_SHIFT_RIGHT exp

exp_binassign_in_place_rotate_left ::=
    exp IN_PLACE_ROTATE_LEFT exp

exp_binassign_in_place_rotate_right ::=
    exp IN_PLACE_ROTATE_RIGHT exp

exp_binassign_in_place_add_wrap_on_overflow ::=
    exp IN_PLACE_ADD_WRAP_ON_OVERFLOW exp

exp_binassign_in_place_subtract_wrap_on_overflow ::=
    exp IN_PLACE_SUBTRACT_WRAP_ON_OVERFLOW exp

exp_binassign_in_place_multiply_wrap_on_overflow ::=
    exp IN_PLACE_MULTIPLY_WRAP_ON_OVERFLOW exp

exp_binassign_in_place_exponentiation_wrap_on_overflow ::=
    exp IN_PLACE_EXPONENTIATION_WRAP_ON_OVERFLOW exp

exp_binassign_in_place_concatenation ::=
    exp IN_PLACE_CONCATENATION exp


//<exp_obj> ::=
//    '{' <list(<exp_field>, ';')> '}'

//<exp_plain> ::=
//    <lit>
//    '(' <list(<exp>, ',')> ')'

exp_plain ::=
    lit
  | exp_parens

private exp_parens ::=
    exp_parens_real

exp_parens_real ::=
    L_PAREN exp? (COMA exp)* R_PAREN

//<exp_nullary> ::=
//    <exp_obj>
//    <exp_plain>
//    <id>

private exp_nullary ::=
//    exp_obj
    exp_plain
  | exp_id

exp_id ::=
    ID

//<exp_post> ::=
//    <exp_nullary>
//    '[' 'var'? <list(<exp_nonvar>, ',')> ']'
//    <exp_post> '[' <exp> ']'
//    <exp_post> '.' <nat>
//    <exp_post> '.' <id>
//    <exp_post> ('<' <list(<typ>, ',')> '>')? <exp_nullary>
//    <exp_post> BANG

private exp_post ::=
    exp_nullary
  | exp_array
  | exp_post_array
  | exp_post_id
  | exp_post_ref
  | exp_post_generics
  | exp_post_bang

// Ref: '[' 'var'? <list(<exp_nonvar>, ',')> ']'
exp_array ::=
    L_SQUARE VAR? exp_nonvar? (COMA exp_nonvar)* R_SQUARE

// Ref: <exp_post> '[' <exp> ']'
exp_post_array ::=
    exp L_SQUARE exp R_SQUARE

// Ugly hack because resursing on exp_post like in the spec is not possible (private)
// Therefore recursing directly on "function call"-like expression
exp_post_ref ::=
    exp exp_parens

// Ref: <exp_post> '.' <id>
exp_post_id ::=
    exp POINT ID

// Ref: <exp_post> ('<' <list(<typ>, ',')> '>')? <exp_nullary>
// TODO: must be optional. But making it optional makes an infinite recursion.
exp_post_generics ::=
    exp (L_ANGLE typ (COMA typ)* R_ANGLE) exp_nullary

// Ref: <exp_post> BANG
exp_post_bang ::=
    exp BANG

//<exp_un> ::=
//    <exp_post>
//    '#' <id>
//    '#' <id> <exp_nullary>
//    '?' <exp_un>
//    <unop> <exp_un>
//    <unassign> <exp_un>
//    'actor' <exp_plain>
//    'not' <exp_un>
//    'debug_show' <exp_un>


private exp_un ::=
    exp_post
  | exp_unop


//<exp_bin> ::=
//    <exp_un>
//    <exp_bin> <binop> <exp_bin>
//    <exp_bin> <relop> <exp_bin>
//    <exp_bin> 'and' <exp_bin>
//    <exp_bin> 'or' <exp_bin>
//    <exp_bin> ':' <typ>


private exp_bin ::=
    exp_un
  | binop_group
  | relational_group
  | exp_and
  | exp_or
  | exp_column

private binop_group ::=
    power_group
  | shift_group
  | bitwise_xor_group
  | bitwise_and_group
  | bitwise_or_group
  | multiply_group
  | add_group

private power_group ::=
    exp_exponentiation
  | exp_wrapping_exponentiation

exp_exponentiation ::=
    exp POW exp

exp_wrapping_exponentiation ::=
    exp WRAPPING_POW exp

private shift_group ::=
    exp_left_shift
  | exp_right_shift
  | exp_left_rotate
  | exp_right_rotate

exp_left_shift ::=
    exp L_SHIFT exp

exp_right_shift ::=
    exp R_SHIFT exp

exp_left_rotate::=
    exp L_ROTATE exp

exp_right_rotate::=
    exp R_ROTATE exp

private bitwise_xor_group::=
    exp_xor

exp_xor ::=
    exp CARRET exp

private bitwise_and_group::=
    exp_bitwise_and

exp_bitwise_and ::=
    exp AMPERSAND exp

private bitwise_or_group ::=
    exp_bitwise_or

exp_bitwise_or ::=
    exp PIPE exp

private multiply_group ::=
    exp_multiply
  | exp_divide
  | exp_modulo
  | exp_wrapping_multiply

exp_multiply ::=
    exp STAR exp

exp_divide ::=
    exp SLASH exp

exp_modulo ::=
    exp PERCENT exp

exp_wrapping_multiply ::=
    exp WRAPPING_MUL exp

private add_group ::=
    exp_plus
  | exp_minus
  | exp_wrapping_plus
  | exp_wrapping_minus
  | exp_concat

exp_minus ::=
    exp MINUS exp

exp_plus ::=
    exp PLUS exp

exp_wrapping_minus ::=
    exp WRAPPING_ADD exp

exp_wrapping_plus ::=
    exp WRAPPING_SUB exp

exp_concat ::=
    exp HASH exp

//<exp_nondec> ::=
//    <exp_bin>
//    <exp_bin> ':=' <exp>
//    <exp_bin> <binassign> <exp>
//    'return' <exp>?
//    'async' <exp_nest>
//    'await' <exp_nest>
//    'assert' <exp_nest>
//    'label' <id> (':' <typ>)? <exp_nest>
//    'break' <id> <exp_nullary>?
//    'continue' <id>
//    'debug' <exp_nest>
//    'if' <exp_nullary> <exp_nest>
//    'if' <exp_nullary> <exp_nest> 'else' <exp_nest>
//    'try' <exp_nest> <catch>
//    'throw' <exp_nest>
//    'switch' <exp_nullary> '{' <list(<case>, ';')> '}'
//    'while' <exp_nullary> <exp_nest>
//    'loop' <exp_nest>
//    'loop' <exp_nest> 'while' <exp_nest>
//    'for' '(' <pat> 'in' <exp> ')' <exp_nest>
//    'ignore' <exp_nest>
//    'do' <block>
//    'do' '?' <block>

private exp_nondec ::=
    exp_bin
  | exp_bin_inplace_update
  | exp_binassign
  | exp_bin_if
  | exp_bin_for

exp_bin_inplace_update ::=
    exp IN_PLACE_UPDATE exp

exp_bin_if ::=
    IF exp_nullary exp_nest ELSE exp_nest
  | IF exp_nullary exp_nest

// Ref: 'for' '(' <pat> 'in' <exp> ')' <exp_nest>
exp_bin_for ::=
    FOR L_PAREN pat IN exp R_PAREN exp_nest

//<exp_nonvar> ::=
//    <exp_nondec>
//    <dec_nonvar>

private exp_nonvar ::=
    exp_nondec
//  | dec_nonvar

//<exp> ::=
//    <exp_nonvar>
//    <dec_var>

exp ::=
    exp_nonvar

//<exp_nest> ::=
//    <block>
//    <exp>

exp_nest ::=
    block
  | exp

//<block> ::=
//    '{' <list(<dec>, ';')> '}'

block ::=
    L_CURL dec? (SEMI dec)* SEMI? R_CURL

//<case> ::=
//    'case' <pat_nullary> <exp_nest>

//<catch> ::=
//    'catch' <pat_nullary> <exp_nest>

//<exp_field> ::=
//    'var'? <id> (':' <typ>)?
//    'var'? <id> (':' <typ>)? '=' <exp>


//<dec_field> ::=
//    <vis> <stab> <dec>

dec_field ::=
    visibility stability dec

//<vis> ::=
//    <empty>
//    'private'
//    'public'
//    'system'

visibility ::=
    PRIVATE
  | PUBLIC
  | SYSTEM
  | empty

//<stab> ::=
//    <empty>
//    'flexible'
//    'stable'

stability ::=
    FLEXIBLE
  | STABLE
  | empty

//<pat_plain> ::=
//    '_'
//    <id>
//    <lit>
//    '(' <list(<pat_bin>, ',')> ')'

pat_plain ::=
    UNDERSCORE
  | ID
  | lit
  | L_PAREN pat_bin? (COMA pat_bin)* R_PAREN

//<pat_nullary> ::=
//    <pat_plain>
//    '{' <list(<pat_field>, ';')> '}'

private pat_nullary ::=
    pat_plain

//<pat_un> ::=
//    <pat_nullary>
//    '#' <id>
//    '#' <id> <pat_nullary>
//    '?' <pat_un>
//    <unop> <lit>

private pat_un ::=
    pat_nullary
  | pat_unop

pat_unop ::=
    PLUS lit
  | MINUS lit
  | CARRET lit

//<pat_bin> ::=
//    <pat_un>
//    <pat_bin> 'or' <pat_bin>
//    <pat_bin> ':' <typ>

private pat_bin ::=
    pat_un
//  | pat_bin_or
  | pat_bin_type

pat_bin_type ::=
    pat ':' typ

//<pat> ::=
//    <pat_bin>

pat ::=
    pat_bin

//<pat_field> ::=
//    <id> (':' <typ>)?
//    <id> (':' <typ>)? '=' <pat>

//<dec_var> ::=
//    'var' <id> (':' <typ>)? '=' <exp>

dec_var ::=
    VAR ID (COLUMN typ)? EQ exp

//<dec_nonvar> ::=
//    'let' <pat> '=' <exp>
//    'type' <id> ('<' <list(<typ_bind>, ',')> '>')? '=' <typ>
//    <obj_sort> <id>? '='? <obj_body>
//    <shared_pat_opt> 'func' <id>? ('<' <list(<typ_bind>, ',')> '>')? <pat_plain> (':' <typ>)? <func_body>
//    <shared_pat_opt> <obj_sort>? 'class' <id>? ('<' <list(<typ_bind>, ',')> '>')? <pat_plain> (':' <typ>)? <class_body>

private dec_nonvar ::=
    LET pat EQ exp
// TODO support generics  | TYPE ID (L_ANGLE (typ_bind COMA)* R_ANGLE)? EQ typ
  | TYPE ID EQ typ
  | obj_sort ID? EQ? obj_body
//TODO: generics  | shared_pat_opt FUNC ID? (L_ANGLE (typ_bind COMA)* R_ANGLE)? <pat_plain> (':' <typ>)? func_body
  | shared_pat_opt visibility FUNC ID? pat_plain (':' typ)? func_body
//TODO: generics  | shared_pat_opt obj_sort? CLASS ID? (L_ANGLE (typ_bind COMA)* R_ANGLE)? pat_plain (COLUMN typ)? class_body
  | shared_pat_opt obj_sort? visibility CLASS ID? pat_plain (COLUMN typ)? class_body

//<dec> ::=
//    <dec_var>
//    <dec_nonvar>
//    <exp_nondec>

dec ::=
    dec_var
  | dec_nonvar
  | exp_nondec

//<func_body> ::=
//    '=' <exp>
//    <block>

func_body ::=
    EQ exp
  | block

//<obj_body> ::=
//    '{' <list(<dec_field>, ';')> '}'

obj_body ::=
    L_CURL (dec_field SEMI)* R_CURL

//<class_body> ::=
//    '=' <id>? <obj_body>
//    <obj_body>

class_body ::=
    EQ ID? obj_body
  | obj_body

//<imp> ::=
//    'import' <id>? '='? <text>

imp ::= IMPORT ID? EQ? url SEMI

url ::=
    TEXT

private imp_list ::= imp imp_list*
private dec_list ::= dec SEMI dec_list*

//<prog> ::=
//    <list(<imp>, ';')> <list(<dec>, ';')>

prog::= imp_list* dec_list* LINE_COMMENT* BLOCK_COMMENT*
