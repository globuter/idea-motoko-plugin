{
  parserClass="org.intellij.sdk.language.parser.MotokoParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Motoko"
  psiImplClassSuffix="Impl"
  psiPackage="org.intellij.sdk.language.psi"
  psiImplPackage="org.intellij.sdk.language.psi.impl"

  elementTypeHolderClass="org.intellij.sdk.language.psi.MotokoTypes"
  elementTypeClass="org.intellij.sdk.language.psi.MotokoElementType"
  tokenTypeClass="org.intellij.sdk.language.psi.MotokoTokenType"

  psiImplUtilClass="org.intellij.sdk.language.psi.impl.MotokoPsiImplUtil"
}

motokoFile ::= prog

prog::= imp_list* dec_list*

private imp_list ::= imp imp_list*
private dec_list ::= dec SEMI dec_list*

imp ::= IMPORT ID? EQUAL? STRING SEMI

dec ::= exp

exp ::=
    dec_var
  | exp_nonvar

exp_nonvar ::=
    dec_nonvar
  | exp_nondec

exp_nondec ::=
    exp_bin

exp_bin ::=
    exp_un

exp_un ::=
    exp_post

exp_post ::=
    exp_nullary

exp_nullary ::=
//    exp_obj
    exp_plain
//    id

exp_plain ::=
    lit

dec_nonvar ::= LET pat EQUAL exp

pat ::= pat_bin

pat_bin ::=
    pat_un
//  | pat_bin OR pat_bin
//  | pat_bin ':' typ

pat_un ::=
    pat_nullary
//  | '#' ID
//  | '#' ID pat_nullary
//  | '?' pat_un
    // | <unop> <lit>

pat_nullary ::=
    pat_plain
//  | '{' <list(<pat_field>, ';')> '}'

pat_plain ::=
    UNDERSCORE
  | ID
  | lit
//  |  '(' <list(<pat_bin>, ',')> ')'


// TODO support for types <dec_var> ::= VAR ID (COLUMN <typ>)? EQUAL <lit>
dec_var ::= VAR ID EQUAL lit

lit ::= NULL | bool

bool ::= TRUE | FALSE
